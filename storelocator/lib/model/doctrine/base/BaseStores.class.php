<?php

/**
 * BaseStores
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $brand
 * @property string $type
 * @property string $model
 * @property string $status
 * @property string $area
 * @property string $country
 * @property string $city
 * @property string $name
 * @property string $address
 * @property string $zip
 * @property string $telf
 * @property string $last_update
 * @property string $product_line
 * @property string $latitude
 * @property string $longitude
 * @property integer $order
 * @property integer $user_id
 * @property StoreExtraData $StoreExtraData
 * @property Doctrine_Collection $StoreTypes
 * @property Doctrine_Collection $StoreNews
 * 
 * @method integer             getId()             Returns the current record's "id" value
 * @method string              getBrand()          Returns the current record's "brand" value
 * @method string              getType()           Returns the current record's "type" value
 * @method string              getModel()          Returns the current record's "model" value
 * @method string              getStatus()         Returns the current record's "status" value
 * @method string              getArea()           Returns the current record's "area" value
 * @method string              getCountry()        Returns the current record's "country" value
 * @method string              getCity()           Returns the current record's "city" value
 * @method string              getName()           Returns the current record's "name" value
 * @method string              getAddress()        Returns the current record's "address" value
 * @method string              getZip()            Returns the current record's "zip" value
 * @method string              getTelf()           Returns the current record's "telf" value
 * @method string              getLastUpdate()     Returns the current record's "last_update" value
 * @method string              getProductLine()    Returns the current record's "product_line" value
 * @method string              getLatitude()       Returns the current record's "latitude" value
 * @method string              getLongitude()      Returns the current record's "longitude" value
 * @method integer             getOrder()          Returns the current record's "order" value
 * @method integer             getUserId()         Returns the current record's "user_id" value
 * @method StoreExtraData      getStoreExtraData() Returns the current record's "StoreExtraData" value
 * @method Doctrine_Collection getStoreTypes()     Returns the current record's "StoreTypes" collection
 * @method Doctrine_Collection getStoreNews()      Returns the current record's "StoreNews" collection
 * @method Stores              setId()             Sets the current record's "id" value
 * @method Stores              setBrand()          Sets the current record's "brand" value
 * @method Stores              setType()           Sets the current record's "type" value
 * @method Stores              setModel()          Sets the current record's "model" value
 * @method Stores              setStatus()         Sets the current record's "status" value
 * @method Stores              setArea()           Sets the current record's "area" value
 * @method Stores              setCountry()        Sets the current record's "country" value
 * @method Stores              setCity()           Sets the current record's "city" value
 * @method Stores              setName()           Sets the current record's "name" value
 * @method Stores              setAddress()        Sets the current record's "address" value
 * @method Stores              setZip()            Sets the current record's "zip" value
 * @method Stores              setTelf()           Sets the current record's "telf" value
 * @method Stores              setLastUpdate()     Sets the current record's "last_update" value
 * @method Stores              setProductLine()    Sets the current record's "product_line" value
 * @method Stores              setLatitude()       Sets the current record's "latitude" value
 * @method Stores              setLongitude()      Sets the current record's "longitude" value
 * @method Stores              setOrder()          Sets the current record's "order" value
 * @method Stores              setUserId()         Sets the current record's "user_id" value
 * @method Stores              setStoreExtraData() Sets the current record's "StoreExtraData" value
 * @method Stores              setStoreTypes()     Sets the current record's "StoreTypes" collection
 * @method Stores              setStoreNews()      Sets the current record's "StoreNews" collection
 * 
 * @package    collections
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseStores extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('stores');
        $this->hasColumn('id', 'integer', 11, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 11,
             ));
        $this->hasColumn('brand', 'string', 20, array(
             'type' => 'string',
             'default' => '',
             'length' => 20,
             ));
        $this->hasColumn('type', 'string', 20, array(
             'type' => 'string',
             'default' => '',
             'length' => 20,
             ));
        $this->hasColumn('model', 'string', 3, array(
             'type' => 'string',
             'default' => '',
             'length' => 3,
             ));
        $this->hasColumn('status', 'string', 20, array(
             'type' => 'string',
             'default' => '',
             'length' => 20,
             ));
        $this->hasColumn('area', 'string', 50, array(
             'type' => 'string',
             'default' => '',
             'length' => 50,
             ));
        $this->hasColumn('country', 'string', 50, array(
             'type' => 'string',
             'default' => '',
             'length' => 50,
             ));
        $this->hasColumn('city', 'string', 50, array(
             'type' => 'string',
             'default' => '',
             'length' => 50,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('address', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('zip', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             ));
        $this->hasColumn('telf', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             ));
        $this->hasColumn('last_update', 'string', 30, array(
             'type' => 'string',
             'length' => 30,
             ));
        $this->hasColumn('product_line', 'string', 30, array(
             'type' => 'string',
             'length' => 30,
             ));
        $this->hasColumn('latitude', 'string', 10, array(
             'type' => 'string',
             'default' => '0',
             'length' => 10,
             ));
        $this->hasColumn('longitude', 'string', 10, array(
             'type' => 'string',
             'default' => '0',
             'length' => 10,
             ));
        $this->hasColumn('order', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('user_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             ));


        $this->index('brand_idx', array(
             'fields' => 
             array(
              0 => 'brand',
             ),
             ));
        $this->index('type_idx', array(
             'fields' => 
             array(
              0 => 'type',
             ),
             ));
        $this->index('model_idx', array(
             'fields' => 
             array(
              0 => 'model',
             ),
             ));
        $this->index('status_idx', array(
             'fields' => 
             array(
              0 => 'status',
             ),
             ));
        $this->index('area_idx', array(
             'fields' => 
             array(
              0 => 'area',
             ),
             ));
        $this->index('country_idx', array(
             'fields' => 
             array(
              0 => 'country',
             ),
             ));
        $this->index('city_idx', array(
             'fields' => 
             array(
              0 => 'city',
             ),
             ));
        $this->index('name_idx', array(
             'fields' => 
             array(
              0 => 'name',
             ),
             ));
        $this->option('type', 'INNODB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('StoreExtraData', array(
             'local' => 'id',
             'foreign' => 'store_id'));

        $this->hasMany('StoreType as StoreTypes', array(
             'refClass' => 'StoreStoreType',
             'local' => 'stores_id',
             'foreign' => 'store_type_id'));

        $this->hasMany('StoreNews', array(
             'local' => 'id',
             'foreign' => 'store_id'));
    }
}